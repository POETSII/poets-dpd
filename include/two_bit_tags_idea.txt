


Let us require that the space is of size 3n+1 in each
direction. We then assign co-ordinate tags of:
t = i mod 3,  if i < 3n
    3,        if i == 3n

So for length 10 we have the tags:

0 1 2 0 1 2 0 1 2 3

We can then create a "left-of" ordering on the tags:
0 < 1
1 < 2
2 < 0
2 < 3 (not wrapping)
3 < 0 (wrapping)

Considering incoming tags ta and tb we then get the following (probably...):

             tb
           0 1 2 3
        0  x < > ^
   ta   1  > x < x
        2  < > x <
        3  v < > x

The actions are then (something) like

dx = ba - oa,      if <
   = oa - ba,      if >
   = ba - oa + 1,  if ^
   = a0 - ba + 1,  if v

So with the tag and the offset we can recover relative distance in each
dimension.

If we use a 2-bit tag and 8-bit offset, then this _might_ be enough
to allow for all DPD forces to be implemented using just the positions
in one 32-bit word. However, it is very quantised.

It would definitely provide very accurate fast rejection.


The mod-3 is not generally a problem, as when creating packed distances
each cell knows their tags already.

When migrating we would need to send the full bead position, with full
resolution co-ordinates, so don't need to form the tag then.




If we also packed velocity into a 30-bit word, this would allow for
exchanging beads during the force calculation round in 12 bytes:
- id (32-bit)
- x  (32-bit, packed as above)
- v  (32-bit, 3 10-bit signed integers)

A typical cell with 3 or 4 beads could then share all it's beads
in a single packet. Only in rare cases with 5 beads would it need
two packets.


Packing v as 10-bit fixed-point might (?) cause problems, but it
could instead be stored as block floating-point, e.g.:
- 8-bit exp
- 8-bit signed x
- 8-bit signed y
- 8-bit signed z

Or possibly, given the useful range:
- 5-bit exp
- 9-bit signed x
- 9-bit signed y
- 9-bit signed z

Same approach could work for moving (but not adding) forces.


Ignoring bonds for a moment, this would allow a complete DPD interaction
function with 6 inputs and 3 outputs:

  auto dpd_force(uint32_t ida, uint32_t xa, uint32_t va,  uint32_t idb, uint32_t xb, uint32_t vb) -> float[3]
  {
     int9_t dx[3];
     relative_dist(xa, xb); // Do the above calculation for relative distance

     int?_t r = dx[0]*dx[0] + dx[1]*dx[1] + dx[2]*dx[2];

     if(r==0 || r >= 1){
         return {0,0,0};  // Fast reject
     }

     // At this point xa and xb are dead, so live variables are:
     // ida, va, idb, vb, dx, r


    // Do standard DPD stuff
  }

Main issue is that this does not include hookean force, which requires
inputting kappa and r0 as well. Could be handled outside.